generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  name            String
  firstName       String?
  lastName        String?
  email           String            @unique
  emailVerified   Boolean           @default(false)
  password        String?
  role            Role              @default(USER)
  image           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  accounts        Account[]
  donations       Donation[]
  incomes         Income[]
  variableIncomes VariableIncome[]
  loginHistory    LoginHistory[]
  notifications   Notification[]
  sessions        Session[]
  activityLogs    UserActivityLog[]
  settings        UserSettings?
  feedbacks       Feedback[]

  @@map("user")
}

model Donation {
  id                String       @id @default(uuid())
  userId            String
  organizationName  String
  amount            Float
  currency          Currency     @default(ILS)
  donationType      DonationType
  startDate         DateTime
  month             Int
  year              Int
  installmentsTotal Int?
  installmentsPaid  Int?
  isActive          Boolean      @default(true)
  note              String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, year, month])
  @@map("donation")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification")
}

model UserSettings {
  id                        String             @id @default(uuid())
  userId                    String             @unique
  language                  Language           @default(HE)
  currency                  Currency           @default(ILS)
  tithePercent              Float              @default(10)
  fixedPersonalIncome       Float              @default(0)
  fixedSpouseIncome         Float              @default(0)
  includeSpouseIncome       Boolean            @default(false)
  startingBalance           Float              @default(0)
  carryStrategy             CarryStrategy      @default(CARRY)
  monthCarryStrategy        MonthCarryStrategy @default(CARRY_FORWARD)
  notifyDonationEnding      Boolean            @default(true)
  notifyDebtTwoMonths       Boolean            @default(true)
  isFirstTimeSetupCompleted Boolean            @default(false)
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  user                      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Income {
  id             String   @id @default(uuid())
  userId         String
  personalIncome Float
  spouseIncome   Float?
  month          Int
  year           Int
  isOneTime      Boolean  @default(false)
  oneTimeAmount  Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, month, year])
  @@map("income")
}

model VariableIncome {
  id          String         @id @default(uuid())
  userId      String
  description String
  amount      Float
  currency    Currency       @default(ILS)
  source      IncomeSource   @default(SELF)
  date        DateTime
  schedule    IncomeSchedule @default(ONE_TIME)
  totalMonths Int?
  note        String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@map("variable_income")
}

model UserActivityLog {
  id              String   @id @default(uuid())
  userId          String
  activityType    String // LOGIN, LOGOUT, PAGE_VIEW, etc.
  description     String
  page            String?
  ipAddress       String?
  userAgent       String?
  metadata        Json? // Additional data as JSON
  sessionDuration Int?
  timestamp       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activity_log")
}

model LoginHistory {
  id           String    @id @default(uuid())
  userId       String
  loginTime    DateTime  @default(now())
  logoutTime   DateTime?
  ipAddress    String?
  userAgent    String?
  loginSuccess Boolean   @default(true)
  createdAt    DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_history")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum Role {
  USER
  ADMIN
}

enum DonationType {
  RECURRING
  INSTALLMENTS
  ONE_TIME
}

enum NotificationType {
  FINAL_PAYMENT
  DEBT_REMINDER
  SYSTEM_UPDATE
  GENERAL
}

enum Language {
  HE
  EN
}

enum Currency {
  ILS
  USD
}

enum IncomeSchedule {
  ONE_TIME
  RECURRING
  MULTI_MONTH
}

enum IncomeSource {
  SELF
  SPOUSE
  OTHER
}

enum CarryStrategy {
  CARRY
  RESET
  CARRY_POSITIVE_ONLY
}

enum MonthCarryStrategy {
  INDEPENDENT
  CARRY_FORWARD
  ASK_ME
}

// Feedback
enum FeedbackType {
  BUG
  FEATURE
}

model Feedback {
  id        String       @id @default(uuid())
  userId    String
  type      FeedbackType
  name      String
  email     String
  message   String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("feedback")
}
